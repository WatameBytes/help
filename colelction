// ===== CONFIG =====
// none needed here: we hardcode the endpoint template below

let raw = pm.variables.get('pipeline_ids');
if (!raw) throw new Error('pipeline_ids not found! Did your pre-request script run?');

let ids;
try {
  ids = JSON.parse(raw);
  if (!Array.isArray(ids) || ids.length === 0) throw '';
} catch {
  throw new Error('pipeline_ids must be a JSON array of IDs.');
}

// ===== deepFind (unchanged) =====
function deepFind(obj, keySub) {
  const hits = [];
  (function walk(val) {
    if (Array.isArray(val)) return val.forEach(walk);
    if (val && typeof val === 'object') {
      Object.entries(val).forEach(([k, v]) => {
        if (k.toLowerCase().includes(keySub)) hits.push({ [k]: v });
        walk(v);
      });
    }
  })(obj);
  return hits;
}

// ===== MAIN LOOP =====
let allTopics = [];
let allSubs   = [];
let remaining = ids.length;

ids.forEach(pid => {
  // ← replace with your real Lumi IDM API pattern:
  const url = `https://lumidmapi.companyName/data-ingestion/ingest-data/details/${pid}?tab=dashboard`;

  pm.sendRequest({ url, method: 'GET' }, (err, res) => {
    if (err) {
      console.error(`Error fetching ${pid}:`, err);
    } else if (res.code !== 200) {
      console.error(`Non-200 for ${pid}:`, res.code);
    } else {
      let data;
      try { data = res.json(); }
      catch (e) {
        console.error(`Invalid JSON for ${pid}:`, e);
      }
      if (data) {
        const tRaw = deepFind(data, 'topic');
        const sRaw = deepFind(data, 'subscription');
        const t = tRaw.map(o => Object.values(o)[0]).filter(v => v != null);
        const s = sRaw.map(o => Object.values(o)[0]).filter(v => v != null);
        allTopics = allTopics.concat(t);
        allSubs   = allSubs.concat(s);
      }
    }

    // once all are back:
    remaining--;
    if (remaining === 0) {
      console.log('\n=== ALL TOPICS ===');
      if (allTopics.length) allTopics.forEach(x => console.log('·', x));
      else console.log('(none found)');

      console.log('\n=== ALL SUBSCRIPTIONS ===');
      if (allSubs.length)   allSubs.forEach(x => console.log('·', x));
      else console.log('(none found)');

      pm.test('At least one topic OR subscription across all pipelines', () => {
        pm.expect(allTopics.length + allSubs.length).to.be.above(0);
      });

      // Optionally store them:
      pm.environment.set('all_topics', JSON.stringify(allTopics));
      pm.environment.set('all_subscriptions', JSON.stringify(allSubs));
    }
  });
});
