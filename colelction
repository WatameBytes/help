// ===== deepFind function (unchanged) =====
function deepFind(obj, keySub) {
  const hits = [];
  (function walk(val) {
    if (Array.isArray(val)) return val.forEach(walk);
    if (val && typeof val === 'object') {
      Object.entries(val).forEach(([k, v]) => {
        if (k.toLowerCase().includes(keySub)) hits.push({ [k]: v });
        walk(v);
      });
    }
  })(obj);
  return hits;
}

// ===== parse JSON =====
let jsonData;
try {
  jsonData = pm.response.json();
} catch (e) {
  pm.test('Response is JSON', () => pm.expect.fail('Not valid JSON'));
  return;
}

// ===== extract & simplify =====
const topicsRaw        = deepFind(jsonData, 'topic');
const subscriptionsRaw = deepFind(jsonData, 'subscription');

// pull just the values
const topics        = topicsRaw.map(o => Object.values(o)[0]);
const subscriptions = subscriptionsRaw.map(o => Object.values(o)[0]);

// ===== clean console print =====
console.log('\n=== TOPICS ===');
if (topics.length) {
  topics.forEach(t => console.log('·', t));
} else {
  console.log('(none found)');
}

console.log('\n=== SUBSCRIPTIONS ===');
if (subscriptions.length) {
  subscriptions.forEach(s => console.log('·', s));
} else {
  console.log('(none found)');
}

// ===== keep the test assertion =====
pm.test('Found at least one topic OR subscription', () => {
  pm.expect(topics.length + subscriptions.length).to.be.above(0);
});
